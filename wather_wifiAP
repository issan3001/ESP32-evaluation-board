#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_AHTX0.h>
#include <Adafruit_BMP280.h>
#include <WiFi.h>
#include <WebServer.h>

// --- アクセスポイント設定 ---
const char* ap_ssid = "ESP32_WeatherAP";
const char* ap_password = "12345678";

// --- ピン定義 ---
#define LED_R     15
#define LED_G     2
#define LED_B     4
#define SWITCH_1  12
#define SWITCH_2  14
#define SWITCH_3  26
#define SWITCH_4  27

// --- OLED設定 ---
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// --- センサー設定 ---
Adafruit_AHTX0 aht;
Adafruit_BMP280 bmp;

// --- Webサーバ ---
WebServer server(80);

// --- データ変数 ---
float tempVal = 0, humVal = 0, pressVal = 0;
int colorMode = 0;  // 0=OFF, 1=RED, 2=GREEN, 3=BLUE

// --- HTMLページ ---
const char INDEX_HTML[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>ESP32 気象センサー</title>
<style>
body{font-family:sans-serif;background:#121212;color:#eee;margin:20px;}
.card{background:#1e1e1e;border-radius:16px;max-width:400px;margin:auto;padding:20px;
box-shadow:0 4px 10px rgba(0,0,0,0.4);}
h1{text-align:center;font-size:1.4em;margin-bottom:20px;}
.row{display:flex;justify-content:space-between;padding:6px 0;}
footer{text-align:center;color:#aaa;margin-top:10px;font-size:0.9em;}
</style>
</head>
<body>
<div class="card">
  <h1>ESP32 気象ステーション</h1>
  <div class="row"><span>気温</span><strong id="temp">-- °C</strong></div>
  <div class="row"><span>湿度</span><strong id="hum">-- %</strong></div>
  <div class="row"><span>気圧</span><strong id="pres">-- hPa</strong></div>
  <footer>3秒ごとに自動更新</footer>
</div>
<script>
async function update(){
  try{
    const res = await fetch('/data');
    const j = await res.json();
    document.getElementById('temp').textContent = j.temp.toFixed(1)+' °C';
    document.getElementById('hum').textContent = j.hum.toFixed(1)+' %';
    document.getElementById('pres').textContent = j.pres.toFixed(1)+' hPa';
  }catch(e){}
}
update();
setInterval(update,3000);
</script>
</body>
</html>
)rawliteral";

// --- Webハンドラ ---
void handleRoot() {
  server.send_P(200, "text/html; charset=utf-8", INDEX_HTML);
}

void handleData() {
  sensors_event_t humidity, temp;
  aht.getEvent(&humidity, &temp);
  tempVal = temp.temperature;
  humVal = humidity.relative_humidity;
  pressVal = bmp.readPressure() / 100.0F;

  String json = "{";
  json += "\"temp\":" + String(tempVal, 1) + ",";
  json += "\"hum\":" + String(humVal, 1) + ",";
  json += "\"pres\":" + String(pressVal, 1);
  json += "}";
  server.send(200, "application/json", json);
}

void setup() {
  Wire.begin(21, 22);

  pinMode(LED_R, OUTPUT);
  pinMode(LED_G, OUTPUT);
  pinMode(LED_B, OUTPUT);
  digitalWrite(LED_R, LOW);
  digitalWrite(LED_G, LOW);
  digitalWrite(LED_B, LOW);

  pinMode(SWITCH_1, INPUT_PULLUP);
  pinMode(SWITCH_2, INPUT_PULLUP);
  pinMode(SWITCH_3, INPUT_PULLUP);
  pinMode(SWITCH_4, INPUT_PULLUP);

  // OLED初期化
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) while (1);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("Starting AP..."));
  display.display();

  if (!aht.begin()) {
    display.clearDisplay();
    display.println(F("AHT20 not found"));
    display.display();
    while (1);
  }
  if (!bmp.begin(0x77)) {
    display.clearDisplay();
    display.println(F("BMP280 not found"));
    display.display();
    while (1);
  }

  // --- アクセスポイント開始 ---
  WiFi.softAP(ap_ssid, ap_password);
  IPAddress IP = WiFi.softAPIP();

  // --- OLED表示 ---
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("AP Mode Started!");
  display.println();
  display.print("SSID: "); display.println(ap_ssid);
  display.print("PASS: "); display.println(ap_password);
  display.println();
  display.print("IP: "); display.println(IP);
  display.display();

  // --- Webサーバ起動 ---
  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.begin();
}

void loop() {
  // --- ボタン入力 ---
  if (digitalRead(SWITCH_1) == LOW) colorMode = 1;
  if (digitalRead(SWITCH_2) == LOW) colorMode = 2;
  if (digitalRead(SWITCH_3) == LOW) colorMode = 3;
  if (digitalRead(SWITCH_4) == LOW) colorMode = 0;

  // --- LED出力 ---
  switch (colorMode) {
    case 1: digitalWrite(LED_R, HIGH); digitalWrite(LED_G, LOW); digitalWrite(LED_B, LOW); break;
    case 2: digitalWrite(LED_R, LOW); digitalWrite(LED_G, HIGH); digitalWrite(LED_B, LOW); break;
    case 3: digitalWrite(LED_R, LOW); digitalWrite(LED_G, LOW); digitalWrite(LED_B, HIGH); break;
    default: digitalWrite(LED_R, LOW); digitalWrite(LED_G, LOW); digitalWrite(LED_B, LOW); break;
  }

  // --- センサー更新 ---
  sensors_event_t humidity, temp;
  aht.getEvent(&humidity, &temp);
  float tempVal = temp.temperature;
  float humVal = humidity.relative_humidity;
  float pressVal = bmp.readPressure() / 100.0F;

  // --- OLED更新 ---
  display.clearDisplay();
  display.setCursor(0, 0);
  display.printf("SSID:%s\n", ap_ssid);
  display.printf("IP:%s\n", WiFi.softAPIP().toString().c_str());
  display.printf("LED:");
  if (colorMode == 0) display.println("OFF");
  else if (colorMode == 1) display.println("RED");
  else if (colorMode == 2) display.println("GREEN");
  else if (colorMode == 3) display.println("BLUE");
  display.printf("T:%.1fC H:%.1f%%\n", tempVal, humVal);
  display.printf("P:%.1fhPa\n", pressVal);
  display.display();

  server.handleClient();
  delay(100);
}
